[
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "librosa",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "librosa",
        "description": "librosa",
        "detail": "librosa",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "win11toast",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "win11toast",
        "description": "win11toast",
        "detail": "win11toast",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "check_for_update",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def check_for_update():\n    try:\n        response = requests.get(LATEST_RELEASE_API, timeout=5)\n        response.raise_for_status()\n        latest_release = response.json()\n        latest_version = latest_release[\"tag_name\"]\n        download_url = latest_release[\"assets\"][0][\"browser_download_url\"]\n        if latest_version != release_version:\n            win11toast.toast(\n                \"Update Available\",",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "download_update",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def download_update(url, latest_version):\n    \"\"\"Download the latest version and close the game after completion.\"\"\"\n    exe_path = os.path.join(os.getcwd(), f\"beat down - {latest_version}.exe\")  # Save as \"beat down - {version}.exe\"\n    try:\n        response = requests.get(url, stream=True)\n        with open(exe_path, \"wb\") as f:\n            for chunk in response.iter_content(1024):\n                f.write(chunk)\n        win11toast.toast(\"Download Complete\", \"The latest version has been downloaded. you can now use the new file.\")\n        # Close the game after downloading",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "cycleSong",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def cycleSong(delta=0.22, pre_max=10.5, post_max=10.5, auto:bool = True):\n    global songI, force_next_song\n    song_files = sorted(glob.glob(\"songs/*.MP3\"))\n    if not song_files:\n        win11toast.toast(\"Beat Rhythm - no songs available\", \"Please add songs to the songs folder.\")\n        sys.exit()\n    if force_next_song:\n        force_next_song = False  # Reset after applying\n    else:\n        songI = (songI + 1) % len(song_files)  # Normal cycling",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "change_difficulty",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def change_difficulty(level=\"normal\"):\n    global tolerance, beat_speed, targets_active, max_combo_multiplier, difficulty\n    difficulty = level\n    settings = DIFFICULTY_SETTINGS[level]\n    tolerance = settings[\"tolerance\"]\n    beat_speed = settings[\"beat_speed\"]\n    targets_active = settings[\"targets\"]\n    max_combo_multiplier = settings[\"max_combo\"]\nDIFFICULTIES = [\"easy\", \"normal\", \"hard\", \"extreme\"]\ndef cycle_difficulty(direction=1):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "cycle_difficulty",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def cycle_difficulty(direction=1):\n    global difficulty\n    idx = DIFFICULTIES.index(difficulty) + direction\n    difficulty = DIFFICULTIES[max(0, min(idx, len(DIFFICULTIES) - 1))]\n    change_difficulty(difficulty)\ncombo_multiplier = 1\ncombo_multiplier_show_cooldown = 0\n# Game settings\nclock = pygame.time.Clock()\nfps = 60",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "release_version",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "release_version = \"v1.0.1\"\n# GitHub repository details\nGITHUB_REPO = \"jacs121/beat-down\"\nLATEST_RELEASE_API = f\"https://api.github.com/repos/{GITHUB_REPO}/releases/latest\"\ndef check_for_update():\n    try:\n        response = requests.get(LATEST_RELEASE_API, timeout=5)\n        response.raise_for_status()\n        latest_release = response.json()\n        latest_version = latest_release[\"tag_name\"]",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "GITHUB_REPO",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "GITHUB_REPO = \"jacs121/beat-down\"\nLATEST_RELEASE_API = f\"https://api.github.com/repos/{GITHUB_REPO}/releases/latest\"\ndef check_for_update():\n    try:\n        response = requests.get(LATEST_RELEASE_API, timeout=5)\n        response.raise_for_status()\n        latest_release = response.json()\n        latest_version = latest_release[\"tag_name\"]\n        download_url = latest_release[\"assets\"][0][\"browser_download_url\"]\n        if latest_version != release_version:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "LATEST_RELEASE_API",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "LATEST_RELEASE_API = f\"https://api.github.com/repos/{GITHUB_REPO}/releases/latest\"\ndef check_for_update():\n    try:\n        response = requests.get(LATEST_RELEASE_API, timeout=5)\n        response.raise_for_status()\n        latest_release = response.json()\n        latest_version = latest_release[\"tag_name\"]\n        download_url = latest_release[\"assets\"][0][\"browser_download_url\"]\n        if latest_version != release_version:\n            win11toast.toast(",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "songI",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "songI = -1\ndef cycleSong(delta=0.22, pre_max=10.5, post_max=10.5, auto:bool = True):\n    global songI, force_next_song\n    song_files = sorted(glob.glob(\"songs/*.MP3\"))\n    if not song_files:\n        win11toast.toast(\"Beat Rhythm - no songs available\", \"Please add songs to the songs folder.\")\n        sys.exit()\n    if force_next_song:\n        force_next_song = False  # Reset after applying\n    else:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "WHITE",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "WHITE = (255, 255, 255)\nLIGHT_GRAY = (127, 127, 127)\nGRAY = (100, 100, 100)\nDARK_GRAY = (15, 15, 15)\nBLACK = (0, 0, 0)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nYELLOW = (255, 255, 0)\nBLUE = (0, 0, 255)\nDARK_RED = (127, 0, 0)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "LIGHT_GRAY",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "LIGHT_GRAY = (127, 127, 127)\nGRAY = (100, 100, 100)\nDARK_GRAY = (15, 15, 15)\nBLACK = (0, 0, 0)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nYELLOW = (255, 255, 0)\nBLUE = (0, 0, 255)\nDARK_RED = (127, 0, 0)\nDARK_GREEN = (0, 127, 0)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "GRAY",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "GRAY = (100, 100, 100)\nDARK_GRAY = (15, 15, 15)\nBLACK = (0, 0, 0)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nYELLOW = (255, 255, 0)\nBLUE = (0, 0, 255)\nDARK_RED = (127, 0, 0)\nDARK_GREEN = (0, 127, 0)\nDARK_YELLOW = (127, 127, 0)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "DARK_GRAY",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "DARK_GRAY = (15, 15, 15)\nBLACK = (0, 0, 0)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nYELLOW = (255, 255, 0)\nBLUE = (0, 0, 255)\nDARK_RED = (127, 0, 0)\nDARK_GREEN = (0, 127, 0)\nDARK_YELLOW = (127, 127, 0)\nDARK_BLUE = (0, 0, 127)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "BLACK",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "BLACK = (0, 0, 0)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nYELLOW = (255, 255, 0)\nBLUE = (0, 0, 255)\nDARK_RED = (127, 0, 0)\nDARK_GREEN = (0, 127, 0)\nDARK_YELLOW = (127, 127, 0)\nDARK_BLUE = (0, 0, 127)\n# Initialize pygame",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "RED",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "RED = (255, 0, 0)\nGREEN = (0, 255, 0)\nYELLOW = (255, 255, 0)\nBLUE = (0, 0, 255)\nDARK_RED = (127, 0, 0)\nDARK_GREEN = (0, 127, 0)\nDARK_YELLOW = (127, 127, 0)\nDARK_BLUE = (0, 0, 127)\n# Initialize pygame\npygame.init()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "GREEN",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "GREEN = (0, 255, 0)\nYELLOW = (255, 255, 0)\nBLUE = (0, 0, 255)\nDARK_RED = (127, 0, 0)\nDARK_GREEN = (0, 127, 0)\nDARK_YELLOW = (127, 127, 0)\nDARK_BLUE = (0, 0, 127)\n# Initialize pygame\npygame.init()\nscreen = pygame.display.set_mode((800, 600))",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "YELLOW",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "YELLOW = (255, 255, 0)\nBLUE = (0, 0, 255)\nDARK_RED = (127, 0, 0)\nDARK_GREEN = (0, 127, 0)\nDARK_YELLOW = (127, 127, 0)\nDARK_BLUE = (0, 0, 127)\n# Initialize pygame\npygame.init()\nscreen = pygame.display.set_mode((800, 600))\n# Target zone settings",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "BLUE",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "BLUE = (0, 0, 255)\nDARK_RED = (127, 0, 0)\nDARK_GREEN = (0, 127, 0)\nDARK_YELLOW = (127, 127, 0)\nDARK_BLUE = (0, 0, 127)\n# Initialize pygame\npygame.init()\nscreen = pygame.display.set_mode((800, 600))\n# Target zone settings\ntarget_y = 550",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "DARK_RED",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "DARK_RED = (127, 0, 0)\nDARK_GREEN = (0, 127, 0)\nDARK_YELLOW = (127, 127, 0)\nDARK_BLUE = (0, 0, 127)\n# Initialize pygame\npygame.init()\nscreen = pygame.display.set_mode((800, 600))\n# Target zone settings\ntarget_y = 550\ntarget_radius = 30",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "DARK_GREEN",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "DARK_GREEN = (0, 127, 0)\nDARK_YELLOW = (127, 127, 0)\nDARK_BLUE = (0, 0, 127)\n# Initialize pygame\npygame.init()\nscreen = pygame.display.set_mode((800, 600))\n# Target zone settings\ntarget_y = 550\ntarget_radius = 30\ntarget0_color = GREEN",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "DARK_YELLOW",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "DARK_YELLOW = (127, 127, 0)\nDARK_BLUE = (0, 0, 127)\n# Initialize pygame\npygame.init()\nscreen = pygame.display.set_mode((800, 600))\n# Target zone settings\ntarget_y = 550\ntarget_radius = 30\ntarget0_color = GREEN\ntarget1_color = YELLOW",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "DARK_BLUE",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "DARK_BLUE = (0, 0, 127)\n# Initialize pygame\npygame.init()\nscreen = pygame.display.set_mode((800, 600))\n# Target zone settings\ntarget_y = 550\ntarget_radius = 30\ntarget0_color = GREEN\ntarget1_color = YELLOW\ntarget2_color = BLUE",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "screen = pygame.display.set_mode((800, 600))\n# Target zone settings\ntarget_y = 550\ntarget_radius = 30\ntarget0_color = GREEN\ntarget1_color = YELLOW\ntarget2_color = BLUE\nnext_song_color = WHITE\nscore = 0\nmaxScore = 0",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "target_y",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "target_y = 550\ntarget_radius = 30\ntarget0_color = GREEN\ntarget1_color = YELLOW\ntarget2_color = BLUE\nnext_song_color = WHITE\nscore = 0\nmaxScore = 0\nscore_font = pygame.font.Font(None, 36)\nend_font = pygame.font.Font(None, 48)  # Font for end screen text",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "target_radius",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "target_radius = 30\ntarget0_color = GREEN\ntarget1_color = YELLOW\ntarget2_color = BLUE\nnext_song_color = WHITE\nscore = 0\nmaxScore = 0\nscore_font = pygame.font.Font(None, 36)\nend_font = pygame.font.Font(None, 48)  # Font for end screen text\ncombo_multiplier_font = pygame.font.Font(None, 45)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "target0_color",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "target0_color = GREEN\ntarget1_color = YELLOW\ntarget2_color = BLUE\nnext_song_color = WHITE\nscore = 0\nmaxScore = 0\nscore_font = pygame.font.Font(None, 36)\nend_font = pygame.font.Font(None, 48)  # Font for end screen text\ncombo_multiplier_font = pygame.font.Font(None, 45)\ntargets_font = pygame.font.Font(None, 25)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "target1_color",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "target1_color = YELLOW\ntarget2_color = BLUE\nnext_song_color = WHITE\nscore = 0\nmaxScore = 0\nscore_font = pygame.font.Font(None, 36)\nend_font = pygame.font.Font(None, 48)  # Font for end screen text\ncombo_multiplier_font = pygame.font.Font(None, 45)\ntargets_font = pygame.font.Font(None, 25)\ninfo_font = pygame.font.Font(None, 20)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "target2_color",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "target2_color = BLUE\nnext_song_color = WHITE\nscore = 0\nmaxScore = 0\nscore_font = pygame.font.Font(None, 36)\nend_font = pygame.font.Font(None, 48)  # Font for end screen text\ncombo_multiplier_font = pygame.font.Font(None, 45)\ntargets_font = pygame.font.Font(None, 25)\ninfo_font = pygame.font.Font(None, 20)\npygame.display.set_caption(\"Beat down\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "next_song_color",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "next_song_color = WHITE\nscore = 0\nmaxScore = 0\nscore_font = pygame.font.Font(None, 36)\nend_font = pygame.font.Font(None, 48)  # Font for end screen text\ncombo_multiplier_font = pygame.font.Font(None, 45)\ntargets_font = pygame.font.Font(None, 25)\ninfo_font = pygame.font.Font(None, 20)\npygame.display.set_caption(\"Beat down\")\nscore_color = WHITE",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "score",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "score = 0\nmaxScore = 0\nscore_font = pygame.font.Font(None, 36)\nend_font = pygame.font.Font(None, 48)  # Font for end screen text\ncombo_multiplier_font = pygame.font.Font(None, 45)\ntargets_font = pygame.font.Font(None, 25)\ninfo_font = pygame.font.Font(None, 20)\npygame.display.set_caption(\"Beat down\")\nscore_color = WHITE\nscore_color_cooldown = 0",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "maxScore",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "maxScore = 0\nscore_font = pygame.font.Font(None, 36)\nend_font = pygame.font.Font(None, 48)  # Font for end screen text\ncombo_multiplier_font = pygame.font.Font(None, 45)\ntargets_font = pygame.font.Font(None, 25)\ninfo_font = pygame.font.Font(None, 20)\npygame.display.set_caption(\"Beat down\")\nscore_color = WHITE\nscore_color_cooldown = 0\nmenu_screen = True  # Variable to track if end screen should be displayed",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "score_font",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "score_font = pygame.font.Font(None, 36)\nend_font = pygame.font.Font(None, 48)  # Font for end screen text\ncombo_multiplier_font = pygame.font.Font(None, 45)\ntargets_font = pygame.font.Font(None, 25)\ninfo_font = pygame.font.Font(None, 20)\npygame.display.set_caption(\"Beat down\")\nscore_color = WHITE\nscore_color_cooldown = 0\nmenu_screen = True  # Variable to track if end screen should be displayed\ntargets_active = []",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "end_font",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "end_font = pygame.font.Font(None, 48)  # Font for end screen text\ncombo_multiplier_font = pygame.font.Font(None, 45)\ntargets_font = pygame.font.Font(None, 25)\ninfo_font = pygame.font.Font(None, 20)\npygame.display.set_caption(\"Beat down\")\nscore_color = WHITE\nscore_color_cooldown = 0\nmenu_screen = True  # Variable to track if end screen should be displayed\ntargets_active = []\nsongList = sorted(glob.glob(\"songs/*.MP3\"))",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "combo_multiplier_font",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "combo_multiplier_font = pygame.font.Font(None, 45)\ntargets_font = pygame.font.Font(None, 25)\ninfo_font = pygame.font.Font(None, 20)\npygame.display.set_caption(\"Beat down\")\nscore_color = WHITE\nscore_color_cooldown = 0\nmenu_screen = True  # Variable to track if end screen should be displayed\ntargets_active = []\nsongList = sorted(glob.glob(\"songs/*.MP3\"))\ndifficulty = \"normal\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "targets_font",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "targets_font = pygame.font.Font(None, 25)\ninfo_font = pygame.font.Font(None, 20)\npygame.display.set_caption(\"Beat down\")\nscore_color = WHITE\nscore_color_cooldown = 0\nmenu_screen = True  # Variable to track if end screen should be displayed\ntargets_active = []\nsongList = sorted(glob.glob(\"songs/*.MP3\"))\ndifficulty = \"normal\"\ntolerance = 40",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "info_font",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "info_font = pygame.font.Font(None, 20)\npygame.display.set_caption(\"Beat down\")\nscore_color = WHITE\nscore_color_cooldown = 0\nmenu_screen = True  # Variable to track if end screen should be displayed\ntargets_active = []\nsongList = sorted(glob.glob(\"songs/*.MP3\"))\ndifficulty = \"normal\"\ntolerance = 40\nbeat_speed = 155  # Speed at which onsets move down the screen (pixels per second)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "score_color",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "score_color = WHITE\nscore_color_cooldown = 0\nmenu_screen = True  # Variable to track if end screen should be displayed\ntargets_active = []\nsongList = sorted(glob.glob(\"songs/*.MP3\"))\ndifficulty = \"normal\"\ntolerance = 40\nbeat_speed = 155  # Speed at which onsets move down the screen (pixels per second)\ntargets_active = [-1, 1]\nmax_combo_multiplier = 10",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "score_color_cooldown",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "score_color_cooldown = 0\nmenu_screen = True  # Variable to track if end screen should be displayed\ntargets_active = []\nsongList = sorted(glob.glob(\"songs/*.MP3\"))\ndifficulty = \"normal\"\ntolerance = 40\nbeat_speed = 155  # Speed at which onsets move down the screen (pixels per second)\ntargets_active = [-1, 1]\nmax_combo_multiplier = 10\nDIFFICULTY_SETTINGS = {",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "menu_screen",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "menu_screen = True  # Variable to track if end screen should be displayed\ntargets_active = []\nsongList = sorted(glob.glob(\"songs/*.MP3\"))\ndifficulty = \"normal\"\ntolerance = 40\nbeat_speed = 155  # Speed at which onsets move down the screen (pixels per second)\ntargets_active = [-1, 1]\nmax_combo_multiplier = 10\nDIFFICULTY_SETTINGS = {\n    \"easy\": {\"tolerance\": 50, \"beat_speed\": 80, \"targets\": [0], \"max_combo\": 15},",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "targets_active",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "targets_active = []\nsongList = sorted(glob.glob(\"songs/*.MP3\"))\ndifficulty = \"normal\"\ntolerance = 40\nbeat_speed = 155  # Speed at which onsets move down the screen (pixels per second)\ntargets_active = [-1, 1]\nmax_combo_multiplier = 10\nDIFFICULTY_SETTINGS = {\n    \"easy\": {\"tolerance\": 50, \"beat_speed\": 80, \"targets\": [0], \"max_combo\": 15},\n    \"normal\": {\"tolerance\": 40, \"beat_speed\": 155, \"targets\": [-1, 1], \"max_combo\": 10},",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "songList",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "songList = sorted(glob.glob(\"songs/*.MP3\"))\ndifficulty = \"normal\"\ntolerance = 40\nbeat_speed = 155  # Speed at which onsets move down the screen (pixels per second)\ntargets_active = [-1, 1]\nmax_combo_multiplier = 10\nDIFFICULTY_SETTINGS = {\n    \"easy\": {\"tolerance\": 50, \"beat_speed\": 80, \"targets\": [0], \"max_combo\": 15},\n    \"normal\": {\"tolerance\": 40, \"beat_speed\": 155, \"targets\": [-1, 1], \"max_combo\": 10},\n    \"hard\": {\"tolerance\": 40, \"beat_speed\": 200, \"targets\": [-1, 0, 1], \"max_combo\": 7},",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "difficulty",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "difficulty = \"normal\"\ntolerance = 40\nbeat_speed = 155  # Speed at which onsets move down the screen (pixels per second)\ntargets_active = [-1, 1]\nmax_combo_multiplier = 10\nDIFFICULTY_SETTINGS = {\n    \"easy\": {\"tolerance\": 50, \"beat_speed\": 80, \"targets\": [0], \"max_combo\": 15},\n    \"normal\": {\"tolerance\": 40, \"beat_speed\": 155, \"targets\": [-1, 1], \"max_combo\": 10},\n    \"hard\": {\"tolerance\": 40, \"beat_speed\": 200, \"targets\": [-1, 0, 1], \"max_combo\": 7},\n    \"extreme\": {\"tolerance\": 35, \"beat_speed\": 230, \"targets\": [-1, 0, 1], \"max_combo\": 5},",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "tolerance",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "tolerance = 40\nbeat_speed = 155  # Speed at which onsets move down the screen (pixels per second)\ntargets_active = [-1, 1]\nmax_combo_multiplier = 10\nDIFFICULTY_SETTINGS = {\n    \"easy\": {\"tolerance\": 50, \"beat_speed\": 80, \"targets\": [0], \"max_combo\": 15},\n    \"normal\": {\"tolerance\": 40, \"beat_speed\": 155, \"targets\": [-1, 1], \"max_combo\": 10},\n    \"hard\": {\"tolerance\": 40, \"beat_speed\": 200, \"targets\": [-1, 0, 1], \"max_combo\": 7},\n    \"extreme\": {\"tolerance\": 35, \"beat_speed\": 230, \"targets\": [-1, 0, 1], \"max_combo\": 5},\n}",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "beat_speed",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "beat_speed = 155  # Speed at which onsets move down the screen (pixels per second)\ntargets_active = [-1, 1]\nmax_combo_multiplier = 10\nDIFFICULTY_SETTINGS = {\n    \"easy\": {\"tolerance\": 50, \"beat_speed\": 80, \"targets\": [0], \"max_combo\": 15},\n    \"normal\": {\"tolerance\": 40, \"beat_speed\": 155, \"targets\": [-1, 1], \"max_combo\": 10},\n    \"hard\": {\"tolerance\": 40, \"beat_speed\": 200, \"targets\": [-1, 0, 1], \"max_combo\": 7},\n    \"extreme\": {\"tolerance\": 35, \"beat_speed\": 230, \"targets\": [-1, 0, 1], \"max_combo\": 5},\n}\ndef change_difficulty(level=\"normal\"):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "targets_active",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "targets_active = [-1, 1]\nmax_combo_multiplier = 10\nDIFFICULTY_SETTINGS = {\n    \"easy\": {\"tolerance\": 50, \"beat_speed\": 80, \"targets\": [0], \"max_combo\": 15},\n    \"normal\": {\"tolerance\": 40, \"beat_speed\": 155, \"targets\": [-1, 1], \"max_combo\": 10},\n    \"hard\": {\"tolerance\": 40, \"beat_speed\": 200, \"targets\": [-1, 0, 1], \"max_combo\": 7},\n    \"extreme\": {\"tolerance\": 35, \"beat_speed\": 230, \"targets\": [-1, 0, 1], \"max_combo\": 5},\n}\ndef change_difficulty(level=\"normal\"):\n    global tolerance, beat_speed, targets_active, max_combo_multiplier, difficulty",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "max_combo_multiplier",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "max_combo_multiplier = 10\nDIFFICULTY_SETTINGS = {\n    \"easy\": {\"tolerance\": 50, \"beat_speed\": 80, \"targets\": [0], \"max_combo\": 15},\n    \"normal\": {\"tolerance\": 40, \"beat_speed\": 155, \"targets\": [-1, 1], \"max_combo\": 10},\n    \"hard\": {\"tolerance\": 40, \"beat_speed\": 200, \"targets\": [-1, 0, 1], \"max_combo\": 7},\n    \"extreme\": {\"tolerance\": 35, \"beat_speed\": 230, \"targets\": [-1, 0, 1], \"max_combo\": 5},\n}\ndef change_difficulty(level=\"normal\"):\n    global tolerance, beat_speed, targets_active, max_combo_multiplier, difficulty\n    difficulty = level",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "DIFFICULTY_SETTINGS",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "DIFFICULTY_SETTINGS = {\n    \"easy\": {\"tolerance\": 50, \"beat_speed\": 80, \"targets\": [0], \"max_combo\": 15},\n    \"normal\": {\"tolerance\": 40, \"beat_speed\": 155, \"targets\": [-1, 1], \"max_combo\": 10},\n    \"hard\": {\"tolerance\": 40, \"beat_speed\": 200, \"targets\": [-1, 0, 1], \"max_combo\": 7},\n    \"extreme\": {\"tolerance\": 35, \"beat_speed\": 230, \"targets\": [-1, 0, 1], \"max_combo\": 5},\n}\ndef change_difficulty(level=\"normal\"):\n    global tolerance, beat_speed, targets_active, max_combo_multiplier, difficulty\n    difficulty = level\n    settings = DIFFICULTY_SETTINGS[level]",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "DIFFICULTIES",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "DIFFICULTIES = [\"easy\", \"normal\", \"hard\", \"extreme\"]\ndef cycle_difficulty(direction=1):\n    global difficulty\n    idx = DIFFICULTIES.index(difficulty) + direction\n    difficulty = DIFFICULTIES[max(0, min(idx, len(DIFFICULTIES) - 1))]\n    change_difficulty(difficulty)\ncombo_multiplier = 1\ncombo_multiplier_show_cooldown = 0\n# Game settings\nclock = pygame.time.Clock()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "combo_multiplier",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "combo_multiplier = 1\ncombo_multiplier_show_cooldown = 0\n# Game settings\nclock = pygame.time.Clock()\nfps = 60\nbeat_start = time.time()  # Start time to sync the onsets\nonsets = []\naudio_path = songList[0]\nforce_next_song = False\n# Game loop",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "combo_multiplier_show_cooldown",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "combo_multiplier_show_cooldown = 0\n# Game settings\nclock = pygame.time.Clock()\nfps = 60\nbeat_start = time.time()  # Start time to sync the onsets\nonsets = []\naudio_path = songList[0]\nforce_next_song = False\n# Game loop\nstart_menu = True",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "clock = pygame.time.Clock()\nfps = 60\nbeat_start = time.time()  # Start time to sync the onsets\nonsets = []\naudio_path = songList[0]\nforce_next_song = False\n# Game loop\nstart_menu = True\nrunning = True\nwhile running:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "fps",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "fps = 60\nbeat_start = time.time()  # Start time to sync the onsets\nonsets = []\naudio_path = songList[0]\nforce_next_song = False\n# Game loop\nstart_menu = True\nrunning = True\nwhile running:\n    current_time = time.time() - beat_start",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "beat_start",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "beat_start = time.time()  # Start time to sync the onsets\nonsets = []\naudio_path = songList[0]\nforce_next_song = False\n# Game loop\nstart_menu = True\nrunning = True\nwhile running:\n    current_time = time.time() - beat_start\n    if menu_screen:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "onsets",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "onsets = []\naudio_path = songList[0]\nforce_next_song = False\n# Game loop\nstart_menu = True\nrunning = True\nwhile running:\n    current_time = time.time() - beat_start\n    if menu_screen:\n        # Display the end screen",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "audio_path",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "audio_path = songList[0]\nforce_next_song = False\n# Game loop\nstart_menu = True\nrunning = True\nwhile running:\n    current_time = time.time() - beat_start\n    if menu_screen:\n        # Display the end screen\n        screen.fill(BLACK)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "force_next_song",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "force_next_song = False\n# Game loop\nstart_menu = True\nrunning = True\nwhile running:\n    current_time = time.time() - beat_start\n    if menu_screen:\n        # Display the end screen\n        screen.fill(BLACK)\n        # Calculate positions to center text",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "start_menu",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "start_menu = True\nrunning = True\nwhile running:\n    current_time = time.time() - beat_start\n    if menu_screen:\n        # Display the end screen\n        screen.fill(BLACK)\n        # Calculate positions to center text\n        score_percentage = math.floor(100 * ((score / maxScore) if score > 0 else 0))\n        difficulty_text = combo_multiplier_font.render(difficulty.upper(), True, WHITE)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "running = True\nwhile running:\n    current_time = time.time() - beat_start\n    if menu_screen:\n        # Display the end screen\n        screen.fill(BLACK)\n        # Calculate positions to center text\n        score_percentage = math.floor(100 * ((score / maxScore) if score > 0 else 0))\n        difficulty_text = combo_multiplier_font.render(difficulty.upper(), True, WHITE)\n        difficulty_rect = difficulty_text.get_rect(center=(screen.get_width() / 2, 50))",
        "detail": "main",
        "documentation": {}
    }
]